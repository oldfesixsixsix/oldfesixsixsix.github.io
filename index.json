[{"content":"","permalink":"https://oldfesixsixsix.github.io/posts/my-new-page6/","summary":"","title":"My New Page6"},{"content":"1. 先按照 lovable clone to github 自帶的 README.md 操作 Follow these steps:\n# Step 1: Clone the repository using the project\u0026#39;s Git URL. git clone \u0026lt;YOUR_GIT_URL\u0026gt; # Step 2: Navigate to the project directory. cd \u0026lt;YOUR_PROJECT_NAME\u0026gt; # Step 3: Install the necessary dependencies. npm i # Step 4: Start the development server with auto-reloading and an instant preview. npm run dev npm install ncp --save-dev 2. 路徑調整(非必要) src/App.tsx\n標籤調整 BrowserRouter -\u0026gt; HashRouter\nvite.config.ts\nexport default defineConfig(({ mode }) =\u0026gt; ({ base: \u0026#34;/page1/\u0026#34;, 3. 一鍵打包 複製到指定路徑下\nnpm run deploy package.json\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vite build\u0026#34;, \u0026#34;build:dev\u0026#34;: \u0026#34;vite build --mode development\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint .\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;ncp dist D:/workspace1/username/repo1\u0026#34; }, 複製到指定路徑下 並且將該路徑下檔案推送\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vite build\u0026#34;, \u0026#34;build:dev\u0026#34;: \u0026#34;vite build --mode development\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint .\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;ncp dist D:/workspace1/username/repo1 \u0026amp;\u0026amp; cd D:/workspace1/username/repo1 \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m \\\u0026#34;Update repo1 build\\\u0026#34; \u0026amp;\u0026amp; git push\u0026#34; }, commit message error\nerror: pathspec \u0026#39;repo1\u0026#39; did not match any file(s) known to git error: pathspec \u0026#39;build\u0026#39;\u0026#39; did not match any file(s) known to git 這代表 commit 訊息有問題，記得是用 \u0026quot;將訊息包起來\n","permalink":"https://oldfesixsixsix.github.io/posts/my-new-page5/","summary":"\u003ch1 id=\"1-先按照-lovable-clone-to-github-自帶的-readmemd-操作\"\u003e1. 先按照 lovable clone to github 自帶的 README.md 操作\u003c/h1\u003e\n\u003cp\u003eFollow these steps:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Step 1: Clone the repository using the project\u0026#39;s Git URL.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone \u0026lt;YOUR_GIT_URL\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Step 2: Navigate to the project directory.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd \u0026lt;YOUR_PROJECT_NAME\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Step 3: Install the necessary dependencies.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Step 4: Start the development server with auto-reloading and an instant preview.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm run dev\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm install ncp --save-dev\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"2-路徑調整非必要\"\u003e2. 路徑調整(非必要)\u003c/h1\u003e\n\u003cp\u003esrc/App.tsx\u003c/p\u003e","title":"Page5 - lovable clone and deploy to gitpage"},{"content":"本次目標： 下載 YouTube Shorts 並轉換成 MP3 語音辨識 (Speech-to-Text) 需先安裝：\npip install openai-whisper sudo apt install ffmpeg yt-dlp -y openai-whisper Whisper 會在第一次載入時下載語音模型：\ntiny → 約 74 MB\nbase → 約 142 MB\nsmall → 約 466 MB\nmedium → 約 1.5 GB\nlarge → 約 1.9 GB\nopenai-whisper 本身 Python 套件不大，只有幾 MB，但它會依賴 PyTorch（torch、torchaudio、torchvision），這些套件通常就有 1GB ~ 2GB 以上\n本地版這個會安裝超級久，如果只是為了短影片語音辨識可以考慮雲端版\npip install -U openai-whisper error: externally-managed-environment × This environment is externally managed ╰─\u0026gt; To install Python packages system-wide, try apt install python3-xyz, where xyz is the package you are trying to install. 目前 WSL 的 Python 環境被 Ubuntu “受管理”(externally managed)”。\n這種情況常發生在 Ubuntu 22.04/23.10 以上自帶 Python 3.12， 系統為了安全，不允許你直接用 pip install 安裝到系統 Python， 會建議你用 apt install python3-。\n用 Python 虛擬環境 (推薦) 安裝必要的插件 這是最乾淨、最安全的方法，不會破壞系統 Python：\n先測試：建立虛擬環境\npython3 -m venv venv 在 WSL (Ubuntu) 上，建立虛擬環境需要 venv 模組 如果出現錯誤像 No module named venv，就需要安裝：\nsudo apt install python3-venv -y # 進入你要放專案的資料夾 cd ~/myproject # 建立虛擬環境 python3 -m venv venv # 啟動虛擬環境 source venv/bin/activate # 升級 pip pip install --upgrade pip # 安裝 openai-whisper pip install openai-whisper # 安裝 ffmpeg (系統套件) sudo apt install ffmpeg -y Python 腳本說明 從 YouTube Shorts 下載影片（yt-dlp） 自動 user-agent 避免 403 自動 fallback mp4 → mp3 自動抓取影片標題 使用 Whisper 本地模型轉成文字 支援 \u0026ndash;model 調整 Whisper 模型 如果沒傳 output_folder，直接用影片標題命名 .mp3 和 .txt，存在當前路徑 transcribe.py 腳本內容 #!/usr/bin/env python3 import subprocess import whisper import sys import os import shlex import argparse import glob # --------------------------- # 參數設定 # --------------------------- parser = argparse.ArgumentParser(description=\u0026#34;下載 YouTube Shorts，轉 mp3 並用 Whisper 轉文字\u0026#34;) parser.add_argument(\u0026#34;url\u0026#34;, help=\u0026#34;YouTube Shorts 影片 URL\u0026#34;) parser.add_argument(\u0026#34;output_folder\u0026#34;, nargs=\u0026#34;?\u0026#34;, default=None, help=\u0026#34;輸出資料夾（可選）\u0026#34;) parser.add_argument(\u0026#34;--model\u0026#34;, default=\u0026#34;base\u0026#34;, help=\u0026#34;Whisper 模型 (tiny/base/small/medium/large)\u0026#34;) parser.add_argument(\u0026#34;--cookies\u0026#34;, default=None, help=\u0026#34;YouTube cookies.txt 檔案（可選）\u0026#34;) args = parser.parse_args() yt_url = args.url output_folder = args.output_folder model_name = args.model cookies_file = args.cookies # --------------------------- # 輸出路徑設定 # --------------------------- if output_folder: os.makedirs(output_folder, exist_ok=True) out_template = os.path.join(output_folder, \u0026#34;%(title)s.%(ext)s\u0026#34;) else: out_template = \u0026#34;%(title)s.%(ext)s\u0026#34; # 當前目錄 # --------------------------- # yt-dlp 下載函式 # --------------------------- def download_audio(url): # 嘗試直接下載 mp3 cmd = f\u0026#39;yt-dlp -x --audio-format mp3 -o \u0026#34;{out_template}\u0026#34; --user-agent \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\u0026#34;\u0026#39; if cookies_file: cmd += f\u0026#39; --cookies {shlex.quote(cookies_file)}\u0026#39; cmd += f\u0026#39; {shlex.quote(url)}\u0026#39; try: subprocess.run(cmd, shell=True, check=True) except subprocess.CalledProcessError: print(\u0026#34;直接下載 mp3 失敗，嘗試先下載 mp4 再轉 mp3...\u0026#34;) # 下載 mp4 mp4_template = os.path.splitext(out_template)[0] + \u0026#34;.mp4\u0026#34; cmd_mp4 = f\u0026#39;yt-dlp -f bestvideo+bestaudio -o \u0026#34;{mp4_template}\u0026#34; --merge-output-format mp4 --user-agent \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\u0026#34;\u0026#39; if cookies_file: cmd_mp4 += f\u0026#39; --cookies {shlex.quote(cookies_file)}\u0026#39; subprocess.run(cmd_mp4, shell=True, check=True) # 轉 mp3 mp3_file = os.path.splitext(mp4_template)[0] + \u0026#34;.mp3\u0026#34; subprocess.run(f\u0026#39;ffmpeg -y -i \u0026#34;{mp4_template}\u0026#34; \u0026#34;{mp3_file}\u0026#34;\u0026#39;, shell=True, check=True) return mp3_file # 找最新 mp3 search_dir = output_folder if output_folder else \u0026#34;.\u0026#34; mp3_files = glob.glob(os.path.join(search_dir, \u0026#34;*.mp3\u0026#34;)) if not mp3_files: raise FileNotFoundError(\u0026#34;未找到 mp3 檔案\u0026#34;) latest_mp3 = max(mp3_files, key=os.path.getmtime) return latest_mp3 # --------------------------- # 執行下載 # --------------------------- try: mp3_file = download_audio(yt_url) except Exception as e: print(\u0026#34;下載失敗:\u0026#34;, e) sys.exit(1) # --------------------------- # Whisper 語音辨識 # --------------------------- model = whisper.load_model(model_name) result = model.transcribe(mp3_file) # --------------------------- # 輸出文字檔（同名 mp3 + .txt） # --------------------------- txt_file = os.path.splitext(mp3_file)[0] + \u0026#34;.txt\u0026#34; with open(txt_file, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(result[\u0026#34;text\u0026#34;]) print(f\u0026#34;轉寫完成: {txt_file}\u0026#34;) 使用範例 指定模型和資料夾：\npython transcribe.py \u0026#34;https://www.youtube.com/shorts/XXXXXXXXXXX\u0026#34; \u0026#34;/home/user/output\u0026#34; --model tiny 指定模型，但不給資料夾 → 會存到當前路徑，檔名用影片標題：\npython transcribe.py \u0026#34;https://www.youtube.com/shorts/XXXXXXXXXXX\u0026#34; --model medium 不指定模型 → 預設 base：\npython transcribe.py \u0026#34;https://www.youtube.com/shorts/XXXXXXXXXXX\u0026#34; python3 transcribe.py \u0026#34;https://www.youtube.com/shorts/sKntYRHWMN0\u0026#34; --model tiny yt-dlp 在 window 本地執行 ok 但切到 WSL 環境就不行? yt-dlp -x --audio-format mp3 --cookies cookies.txt -o \u0026#34;%(title)s.%(ext)s\u0026#34; https://www.youtube.com/shorts/sKntYRHWMN0 本地可以正常下載 shorts\n但WSL 加 user-agent 和 使用 cookies.txt（登入 YouTube）\n還是 ERROR: unable to download video data: HTTP Error 403: Forbidden\nWSL 的網路環境與 Windows 不完全一樣，導致 yt-dlp 在 WSL 下載 YouTube Shorts 可能會被拒絕或 403。\n# 測試網路 curl -I https://www.youtube.com/shorts/XXXXXXXXXXX # HTTP/2 200 表示 WSL 網路其實是暢通的 為什麼還會 403/400 即使能連線，yt-dlp 下載時仍可能被拒絕，原因主要是 YouTube 動態檢查下載請求：\nUser-Agent 或 headers 不對\nyt-dlp 在 WSL 執行，可能沒有模擬瀏覽器 headers，YouTube 會判斷為「非正常瀏覽器」，直接拒絕。\nShorts API 改版\nYouTube 不定期更新 Shorts 播放器/簽名方式\nyt-dlp 需要最新版才能抓到有效下載 URL\nCookie / 登入限制\n若影片受地區或年齡限制，沒登入 cookie 就會 403\nWindows 可能自動有 cookie 或瀏覽器 session，WSL 沒有\n比較本地與 WSL 的 yt-dlp 版本 本地 yt-dlp 版本\nyt-dlp --version 2025.03.31 WSL yt-dlp 版本\nyt-dlp --version 2024.04.09 可以看出WSL 版本是比較舊的，可能無法抓到有效下載 URL\n更新 yt-dlp 方式 用 apt 更新（可能還是不最新）\nyt-dlp -U sudo apt install yt-dlp -y 直接用官方腳本安裝最新 yt-dlp（推薦）\n那得先移除 apt 版：\nsudo apt remove yt-dlp -y 建議 先退出 venv 再操作系統全域的安裝\n# 退出 venv deactivate # 下載官方最新 yt-dlp sudo curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp sudo chmod a+rx /usr/local/bin/yt-dlp # 確認版本 yt-dlp --version # 應該顯示最新版本 # 回到你的 venv source /path/to/venv/bin/activate vnev 會優先使用虛擬環境內的 PATH\n如果在 venv 裡用 sudo curl \u0026hellip; -o /usr/local/bin/yt-dlp，雖然檔案放到系統路徑 /usr/local/bin，但是 venv 的 PATH 可能把 /usr/local/bin 放在後面或被 venv 覆蓋，導致 Python 找不到 yt-dlp 或仍然用舊版。\n系統安裝是全域的\n更新 /usr/local/bin/yt-dlp 是針對整個系統，而 venv 只是 Python 套件隔離。\n退出 venv 安裝完後，確認全域可執行檔可用，再回 venv 呼叫即可。\n# 在 WSL 重新執行 yt-dlp yt-dlp -x --audio-format mp3 --cookies cookies.txt -o \u0026#34;%(title)s.%(ext)s\u0026#34; https://www.youtube.com/shorts/sKntYRHWMN0 成功 python3 transcribe.py \u0026#34;https://www.youtube.com/shorts/sKntYRHWMN0\u0026#34; --model tiny [youtube] Extracting URL: https://www.youtube.com/shorts/sKntYRHWMN0 [youtube] sKntYRHWMN0: Downloading webpage [youtube] sKntYRHWMN0: Downloading tv simply player API JSON [youtube] sKntYRHWMN0: Downloading tv client config [youtube] sKntYRHWMN0: Downloading tv player API JSON [info] sKntYRHWMN0: Downloading 1 format(s): 251 [download] 那些只有前半句的名句！ #cheems小剧场 mp4.mp3 has already been downloaded [ExtractAudio] Not converting audio 那些只有前半句的名句！ #cheems小剧场 mp4.mp3; file is already in target format mp3 100%|█████████████████████████████████████| 72.1M/72.1M [00:28\u0026lt;00:00, 2.69MiB/s] /mnt/d/new-start-2025-09/ytdlp/download/whisper_test/venv/lib/python3.12/site-packages/whisper/transcribe.py:132: UserWarning: FP16 is not supported on CPU; using FP32 instead warnings.warn(\u0026#34;FP16 is not supported on CPU; using FP32 instead\u0026#34;) 轉寫完成: ./1.txt ","permalink":"https://oldfesixsixsix.github.io/posts/my-new-page4/","summary":"\u003ch1 id=\"本次目標\"\u003e本次目標：\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e下載 YouTube Shorts 並轉換成 MP3\u003c/li\u003e\n\u003cli\u003e語音辨識 (Speech-to-Text)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e需先安裝：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip install openai-whisper\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo apt install ffmpeg yt-dlp -y\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"openai-whisper\"\u003eopenai-whisper\u003c/h1\u003e\n\u003cp\u003eWhisper 會在第一次載入時下載語音模型：\u003c/p\u003e\n\u003cp\u003etiny → 約 74 MB\u003c/p\u003e\n\u003cp\u003ebase → 約 142 MB\u003c/p\u003e\n\u003cp\u003esmall → 約 466 MB\u003c/p\u003e\n\u003cp\u003emedium → 約 1.5 GB\u003c/p\u003e\n\u003cp\u003elarge → 約 1.9 GB\u003c/p\u003e\n\u003cp\u003eopenai-whisper 本身 Python 套件不大，只有幾 MB，但它會依賴 PyTorch（torch、torchaudio、torchvision），這些套件通常就有 1GB ~ 2GB 以上\u003c/p\u003e\n\u003cp\u003e本地版這個會安裝超級久，如果只是為了短影片語音辨識可以考慮雲端版\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epip install -U openai-whisper\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eerror: externally-managed-environment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e× This environment is externally managed\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e╰─\u0026gt; To install Python packages system-wide, try apt install\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    python3-xyz, where xyz is the package you are trying to\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    install.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e目前 WSL 的 Python 環境被 Ubuntu “受管理”(externally managed)”。\u003c/p\u003e","title":"Page4 - 下載 YouTube Shorts 轉換成 MP3，進行語音辨識轉文本"},{"content":"1. 搜尋引擎 預設 PaperMod 是用 Lunr.js。\n它會去讀 /index.json 來跑全文檢索。\nindex.json 的生成\n你需要在 config.toml 裡啟用 JSON 輸出：\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] 這樣 Hugo build 的時候才會輸出 public/index.json。\n本地測試\nhugo server -D http://localhost:1313/index.json 要能打開，看到文章 JSON。\n2. PaperMod 搜尋機制 內建支援 Lunr.js 搜尋 但記得要打開 params 裡的 enableSearch\n你在 config.toml（或 hugo.toml）裡開啟：\n[params] enableSearch = true [params] 是 主題自訂參數。\n去讀取 /index.json，然後在前端跑全文檢索。\n3. 查看內建的 JS PaperMod 的搜尋功能不是靠 Hugo 自己魔法出現的，而是靠 主題本身內建的 JS + 模板。\nls themes/PaperMod/assets/js/ 新一點的 PaperMod repo 是 fastsearch.js\n這版 PaperMod 有搜尋頁 (search layout)，但不是「右上角放大鏡」的 popup 模式，而是 「跳轉到 /search 頁面」 的設計。\n也就是說：\nfastsearch.js 會在 /search/ 頁面啟動，從 index.json 拉全文索引。\ncat themes/PaperMod/layouts/partials/header.html | grep search header.html 裡的這段：\n$is_search := eq (site.GetPage .KeyName).Layout `search` \u0026lt;a href=\u0026#34;{{ .URL | absLangURL }}\u0026#34; ...\u0026gt; 表示導航列如果配置了一個「Search」menu item，它就會連到 /search。\n4. 新增搜尋頁 在 content/search/_index.md 建立搜尋頁：\nhugo new search/_index.md Content \u0026#34;/mnt/d/myblog/content/search/_index.md\u0026#34; created 編輯內容\n--- title: \u0026#34;Search\u0026#34; layout: \u0026#34;search\u0026#34; --- 在 config.toml（或 hugo.toml）加一個 menu 指向 /search：\n[[menu.main]] identifier = \u0026#34;search\u0026#34; name = \u0026#34;Search\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 10 重新 hugo server -D → 你會在導覽列看到「Search」連結，點進去就是全文檢索頁。\n","permalink":"https://oldfesixsixsix.github.io/posts/my-new-page3/","summary":"\u003ch1 id=\"1-搜尋引擎\"\u003e1. 搜尋引擎\u003c/h1\u003e\n\u003cp\u003e預設 PaperMod 是用 Lunr.js。\u003c/p\u003e\n\u003cp\u003e它會去讀 /index.json 來跑全文檢索。\u003c/p\u003e\n\u003cp\u003eindex.json 的生成\u003c/p\u003e\n\u003cp\u003e你需要在 config.toml 裡啟用 JSON 輸出：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eoutputs\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003ehome\u003c/span\u003e = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;HTML\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;RSS\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;JSON\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e這樣 Hugo build 的時候才會輸出 public/index.json。\u003c/p\u003e\n\u003cp\u003e本地測試\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo server -D\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ehttp://localhost:1313/index.json 要能打開，看到文章 JSON。\u003c/p\u003e\n\u003ch1 id=\"2-papermod-搜尋機制\"\u003e2. PaperMod 搜尋機制\u003c/h1\u003e\n\u003cp\u003e內建支援 Lunr.js 搜尋 但記得要打開 params 裡的 enableSearch\u003c/p\u003e\n\u003cp\u003e你在 config.toml（或 hugo.toml）裡開啟：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#a6e22e\"\u003eparams\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eenableSearch\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e[params] 是 主題自訂參數。\u003c/p\u003e\n\u003cp\u003e去讀取 /index.json，然後在前端跑全文檢索。\u003c/p\u003e\n\u003ch1 id=\"3-查看內建的-js\"\u003e3. 查看內建的 JS\u003c/h1\u003e\n\u003cp\u003ePaperMod 的搜尋功能不是靠 Hugo 自己魔法出現的，而是靠 主題本身內建的 JS + 模板。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003els themes/PaperMod/assets/js/\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e新一點的 PaperMod repo 是 fastsearch.js\u003c/p\u003e","title":"Page3 - Hugo 新增搜尋頁"},{"content":"單個專案可適用 1. 產生新的 SSH Key 建議用比較新的 ed25519 演算法：\nssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -C 後面放你的 GitHub email（方便辨識，不影響功能）\n會問你要存哪裡，直接 Enter 就放在 ~/.ssh/id_ed25519\n2. 啟動 ssh-agent 並加 key use git bash\neval \u0026#34;$(ssh-agent -s)\u0026#34; ssh-add ~/.ssh/id_ed25519 3. 把 Public Key 加到 GitHub 印出你的 public key：\ncat ~/.ssh/id_ed25519.pub 複製整串（從 ssh-ed25519 開頭到最後 email 結尾）。\n到 GitHub → Settings → SSH and GPG keys → New SSH key → 貼上。\n4. 測試連線 ssh -T git@github.com 第一次會問你是否信任 GitHub，輸入 yes。 正常會看到：\nHi your-username! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 5. 改用 SSH URL 拉專案 下次 clone/pull/push 用 SSH 格式：\ngit clone git@github.com:oldfesixsixsix/meta-key-vault.git 2025-09-24T22:11:26+08:00\n多個專案 key 管理 1. 產生新的 SSH Key ssh-keygen -t ed25519 -C \u0026#34;cry_email@example.com\u0026#34; -f C:\\Users\\e368-\\.ssh\\id_ed25519_user1 系統會問你儲存路徑，建議改名字避免覆蓋原本\n如果要加密，可以設定 passphrase，否則直接 Enter 跳過。\n2. 將 SSH Key 加入 ssh-agent 啟動 agent 並加入 key： 用git bash\neval \u0026#34;$(ssh-agent -s)\u0026#34; ssh-add ~/.ssh/id_ed25519_user1 3. 把公鑰加入 GitHub cat ~/.ssh/id_ed25519_user1.pub ssh -T git@github.com 用 ssh -T git@github.com 測試成功的話，這證明了你的 SSH 金鑰在系統層面是有效的，並且能夠正確地與 GitHub 伺服器進行身份驗證。\n4. ssh -T git@github.com 測試時候 GitHub 帳號顯示另個帳號怎麼辦？ 當顯示的帳號不是你當前設置的，而是另一個使用者（Hi user2）。\n要解決這個問題，你需要明確告訴 SSH 客戶端，針對這個專案要使用哪把金鑰。\n在 ~/.ssh/config 中設定 SSH 專案別名 (推薦)\n這是最專業也最乾淨的解決方案。它允許你為不同的 GitHub 專案或帳號設定不同的 SSH 金鑰。\n用記事本或其他編輯器打開 config 檔案，並新增以下內容：\nHost github.com-user1 HostName github.com User git IdentityFile C:\\Users\\username\\.ssh\\id_ed25519_user1 Host github.com-user2 HostName github.com User git IdentityFile C:\\Users\\username\\.ssh\\id_ed25519_user2 Host：這是你為這個 SSH 設定建立的別名。\nIdentityFile：這是指向你私鑰的完整路徑。請將 你的使用者名稱 替換成你的實際帳號名稱。\n更新你的 Git 遠端 URL：\n回到你的專案資料夾，打開 TortoiseGit Settings。在 Git -\u0026gt; Remote 頁面，將你的遠端 URL 更改為：\ngit@sshConfigHost:yourGitHubAccount/yourRepositories.git # 比方說我要 SSH 這個專案 git@github.com:userabc/meta-key-vault.git # 我已經在 userabc 的 GitHub SSH And GPG keys 放了 id_ed25519_user2.pub # 就需要去找到 config 中的 id_ed25519_user2 的 Host git@github.com-user2:userabc/meta-key-vault.git 5. GitHub Settings \u0026gt; SSH And GPG keys \u0026gt; Key is already in use 錯誤訊息 Key is already in use 意味著你正嘗試加入的 SSH 公鑰，已經被綁定到另一個 GitHub 帳號了。\nGitHub 對於 SSH 金鑰的規則是：一把公鑰只能被一個 GitHub 帳號使用。\nTortoiseGit 中 PuTTY 與 OpenSSH 的差異 Setting \u0026gt; Network \u0026gt; SSH Client\nC:\\Windows\\System32\\OpenSSH\\ssh.exe C:\\Program Files\\TortoiseGit\\bin\\TortoiseGitPlink.exe 1. PuTTY 客戶端 (TortoiseGitPlink.exe)： 當你選擇這個客戶端時，你必須在 Git \u0026gt; Remote \u0026gt; origin 的頁面中，\n將 .ppk 格式的私鑰放在 PuTTY Key 欄位。PuTTY 的工具只認這種專屬的 .ppk 格式。\n2. OpenSSH 客戶端 (C:\\Windows\\System32\\OpenSSH\\ssh.exe)： 當你選擇這個客戶端時，你不需要在任何欄位中指定金鑰。\nOpenSSH 有自己的一套金鑰管理規則，\n它會自動到你的 Windows 使用者目錄下的 .ssh 資料夾去尋找私鑰。\n你無法在 TortoiseGit 的設定中指定，也找不到這個選項。\n3. SSH 的權限問題 權限問題跟磁碟槽無關\nSSH 的權限問題通常來自兩個地方：\nSSH 金鑰的設定：TortoiseGit 沒有找到正確的金鑰，或無法使用它。 Git 儲存庫的權限：您的 GitHub 帳號對於該儲存庫沒有讀取（pull）或寫入（push）的權限。 ","permalink":"https://oldfesixsixsix.github.io/posts/my-new-page2/","summary":"\u003ch1 id=\"單個專案可適用\"\u003e單個專案可適用\u003c/h1\u003e\n\u003ch2 id=\"1-產生新的-ssh-key\"\u003e1. 產生新的 SSH Key\u003c/h2\u003e\n\u003cp\u003e建議用比較新的 ed25519 演算法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003essh-keygen -t ed25519 -C \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;your_email@example.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e-C 後面放你的 GitHub email（方便辨識，不影響功能）\u003c/p\u003e\n\u003cp\u003e會問你要存哪裡，直接 Enter 就放在 ~/.ssh/id_ed25519\u003c/p\u003e\n\u003ch2 id=\"2-啟動-ssh-agent-並加-key\"\u003e2. 啟動 ssh-agent 並加 key\u003c/h2\u003e\n\u003cp\u003euse git bash\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eeval \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003essh-agent -s\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003essh-add ~/.ssh/id_ed25519\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-把-public-key-加到-github\"\u003e3. 把 Public Key 加到 GitHub\u003c/h2\u003e\n\u003cp\u003e印出你的 public key：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat ~/.ssh/id_ed25519.pub\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e複製整串（從 ssh-ed25519 開頭到最後 email 結尾）。\u003c/p\u003e\n\u003cp\u003e到 GitHub → Settings → SSH and GPG keys → New SSH key → 貼上。\u003c/p\u003e\n\u003ch2 id=\"4-測試連線\"\u003e4. 測試連線\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003essh -T git@github.com\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e第一次會問你是否信任 GitHub，輸入 yes。\n正常會看到：\u003c/p\u003e","title":"Page2 - GitHub Setting SSH And GPG keys \u0026 TortoiseGit Setting SSH Client"},{"content":"1. 下載官方 .deb（建議） 去 Hugo release 下載最新 extended 版（一定要 extended，不然 SCSS 會炸）。 例如：\nwget https://github.com/gohugoio/hugo/releases/download/v0.150.0/hugo_extended_0.156.0_Linux-64bit.tar.gz HTTP request sent, awaiting response... 404 Not Found 2025-09-16 22:38:37 ERROR 404: Not Found. sudo dpkg -i hugo_extended_0.139.0_linux-amd64.deb 下載 v0.150.0 Extended 版本\n前往 Hugo Releases 頁面 ，並下載適用於 Linux 的 Extended 版本。 https://github.com/gohugoio/hugo/releases/tag/v0.150.0\n安裝 Hugo\n在你的 WSL 環境中，執行以下命令來安裝 Hugo：\ntar -xzf hugo_extended_0.150.0_Linux-64bit.tar.gz sudo mv hugo /usr/local/bin/hugo 安裝後檢查：\nhugo version 2. 寫第一篇文章 hugo new posts/hello-world.md 會在 content/posts/ 底下生出一個 md 檔。 draft: true → 改成 false 才會顯示。\n本地預覽\nhugo server -D 3. 先 build Hugo 網站 假設你的 Hugo 專案在 myblog/：\ncd myblog hugo -D 會在 myblog/public/ 生成靜態檔。\n-D 表示 draft 也生成。\n將 public/ 推到 GitHub Pages 方法 A：單 repo (username.github.io)\nRepo 名稱必須是 username.github.io。\npublic/ 裡面所有檔案直接推到 main branch。\nGitHub Pages 會自動啟用，網址就是 https://username.github.io/。\n4. 用 Hugo 產生新頁面（content page） 假設你想新增一篇文章在 posts：\nhugo new posts/my-new-page.md 內容大概是： --- title: \u0026#34;My New Page\u0026#34; date: 2025-09-16T22:00:00+08:00 draft: true --- draft: true → Hugo 不會 build 到 public\n想上線就改成 draft: false 或 hugo -D build\n5. 啟用 GitHub Pages 打開你的 repo → Settings → Pages\nSource 選 branch（main 或 gh-pages）\n6. 頁面訪問異常 因為我剛切換路徑（gh-pages branch） 訪問剛發佈的 https://example.org/posts/my-new-page1/ 時候顯示以下錯誤訊息\nExample Domain This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission. More information... 代表你 baseURL 是 https://example.org/\n根目錄找一下： 直接拉 theme 的範例可能會不是config.toml 會是其他名稱 我是 hugo.toml\n如果真沒有，自己建一個 config.toml 在專案根目錄：\nbaseURL = \u0026#34;https://username.github.io/myblog/\u0026#34; # 沒有 /myblog/ 就自己拿掉這個路徑 languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My Blog\u0026#34; theme = \u0026#34;PaperMod\u0026#34; 7. 部署步驟 wsl /mnt/d/$ cd myblog/ /mnt/d/myblog$ cd content/posts/ /mnt/d/myblog/content/posts$ nano my-new-page1.md /mnt/d/myblog/content/posts$ cp -a /mnt/d/myblog/public/. /mnt/d/username.github.io/ # . 在最後面很重要，表示把 public/ 裡所有檔案和資料夾都複製到目標資料夾，而不會多一層 public/ # 避免漏掉子資料夾或檔案 /mnt/d/myblog/content/posts$ cd /mnt/d/myblog/ /mnt/d/myblog$ hugo -D 因為我在wsl加ssh所以切過來這推\n/mnt/d/username.github.io$ 推到分支更新 GitHub Pages\ngit add . git commit -m \u0026#34;deploy hugo site\u0026#34; git branch -M gh-pages git remote add origin git@github.com:username/myblog.git git push -f origin gh-pages ","permalink":"https://oldfesixsixsix.github.io/posts/my-new-page1/","summary":"\u003ch1 id=\"1-下載官方-deb建議\"\u003e1. 下載官方 .deb（建議）\u003c/h1\u003e\n\u003cp\u003e去 Hugo release\n下載最新 extended 版（一定要 extended，不然 SCSS 會炸）。\n例如：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewget https://github.com/gohugoio/hugo/releases/download/v0.150.0/hugo_extended_0.156.0_Linux-64bit.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHTTP request sent, awaiting response... \u003cspan style=\"color:#ae81ff\"\u003e404\u003c/span\u003e Not Found\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2025-09-16 22:38:37 ERROR 404: Not Found.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo dpkg -i hugo_extended_0.139.0_linux-amd64.deb\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下載 v0.150.0 Extended 版本\u003c/p\u003e\n\u003cp\u003e前往 Hugo Releases 頁面\n，並下載適用於 Linux 的 Extended 版本。\n\u003ca href=\"https://github.com/gohugoio/hugo/releases/tag/v0.150.0\"\u003ehttps://github.com/gohugoio/hugo/releases/tag/v0.150.0\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e安裝 Hugo\u003c/p\u003e\n\u003cp\u003e在你的 WSL 環境中，執行以下命令來安裝 Hugo：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etar -xzf hugo_extended_0.150.0_Linux-64bit.tar.gz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo mv hugo /usr/local/bin/hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安裝後檢查：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"2-寫第一篇文章\"\u003e2. 寫第一篇文章\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new posts/hello-world.md\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e會在 content/posts/ 底下生出一個 md 檔。\ndraft: true → 改成 false 才會顯示。\u003c/p\u003e","title":"Page1 - Hugo + GitHub Pages"},{"content":"","permalink":"https://oldfesixsixsix.github.io/posts/hello-world/","summary":"","title":"Hello World"}]